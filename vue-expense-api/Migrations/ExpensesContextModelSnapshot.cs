// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vue_expense_api.Infrastructure;

namespace vue_expense_api.Migrations
{
    [DbContext(typeof(ExpensesContext))]
    partial class ExpensesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("vue_expense_api.Domain.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("vue_expense_api.Domain.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCateogries");
                });

            modelBuilder.Entity("vue_expense_api.Domain.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("vue_expense_api.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Hash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 10, 27, 14, 16, 20, 859, DateTimeKind.Local).AddTicks(3656),
                            Email = "foo@bar.com",
                            Hash = new byte[] { 90, 177, 120, 49, 28, 137, 149, 206, 238, 119, 17, 226, 154, 115, 28, 9, 74, 99, 78, 25, 125, 214, 37, 189, 41, 240, 54, 121, 183, 16, 217, 104, 123, 141, 28, 49, 22, 139, 141, 124, 20, 78, 160, 185, 171, 144, 9, 139, 120, 208, 6, 233, 129, 248, 65, 10, 236, 20, 242, 214, 223, 32, 245, 223 },
                            Salt = new byte[] { 63, 96, 87, 143, 210, 36, 85, 73, 170, 6, 35, 122, 3, 245, 29, 179 },
                            UpdatedAt = new DateTime(2019, 10, 27, 14, 16, 20, 859, DateTimeKind.Local).AddTicks(3656),
                            UserName = "test"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
