// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vue_expenses_api.Infrastructure;

namespace vue_expenses_api.Migrations
{
    [DbContext(typeof(ExpensesContext))]
    [Migration("20191201041301_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("vue_expenses_api.Domain.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1040.55405689429m
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 577.940990020494m
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 668.240814315267m
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1377.17680930029m
                        },
                        new
                        {
                            Id = 5,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 756.333193162611m
                        },
                        new
                        {
                            Id = 6,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 708.177182687529m
                        },
                        new
                        {
                            Id = 7,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 724.280389595908m
                        },
                        new
                        {
                            Id = 8,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1158.38754044771m
                        },
                        new
                        {
                            Id = 9,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1135.50295407674m
                        },
                        new
                        {
                            Id = 10,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 405.131186780115m
                        },
                        new
                        {
                            Id = 11,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1129.69324883525m
                        },
                        new
                        {
                            Id = 12,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1331.96522241084m
                        },
                        new
                        {
                            Id = 13,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 355.686532731953m
                        },
                        new
                        {
                            Id = 14,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 409.686095970537m
                        },
                        new
                        {
                            Id = 15,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 721.648503430955m
                        },
                        new
                        {
                            Id = 16,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 511.044145566898m
                        },
                        new
                        {
                            Id = 17,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 420.963945994602m
                        },
                        new
                        {
                            Id = 18,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1198.00338554103m
                        },
                        new
                        {
                            Id = 19,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1218.31356814053m
                        },
                        new
                        {
                            Id = 20,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 932.509800853445m
                        },
                        new
                        {
                            Id = 21,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 606.666210157176m
                        },
                        new
                        {
                            Id = 22,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 172.963852841856m
                        },
                        new
                        {
                            Id = 23,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1010.42711781823m
                        },
                        new
                        {
                            Id = 24,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 25.9122185064071m
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColourHex")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            Budget = 2000m,
                            ColourHex = "#CE93D8",
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "General Expenses",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            Budget = 3000m,
                            ColourHex = "#64B5F6",
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Shopping",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            Budget = 2500m,
                            ColourHex = "#26A69A",
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Utilities",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            Budget = 1000m,
                            ColourHex = "#FB8C00",
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Travel",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Credit Card",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Debit Card",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Cheque",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            Name = "Cash",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyRegionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Hash")
                        .HasColumnType("BLOB");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("BLOB");

                    b.Property<string>("SystemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseDarkMode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            CurrencyRegionName = "GB",
                            Email = "test@demo.com",
                            FirstName = "John",
                            FullName = "John Doe",
                            Hash = new byte[] { 194, 172, 90, 162, 216, 129, 48, 228, 254, 41, 251, 116, 49, 71, 13, 67, 230, 168, 211, 146, 178, 51, 94, 226, 100, 127, 10, 42, 64, 153, 188, 159, 113, 194, 131, 22, 7, 69, 43, 128, 222, 49, 80, 103, 193, 26, 238, 98, 123, 146, 177, 116, 121, 196, 129, 191, 29, 220, 34, 21, 97, 101, 149, 11 },
                            LastName = "Doe",
                            Salt = new byte[] { 126, 180, 131, 20, 206, 40, 125, 73, 178, 238, 120, 120, 75, 133, 52, 211 },
                            SystemName = "VueExpenses",
                            UpdatedAt = new DateTime(2019, 12, 1, 4, 13, 1, 151, DateTimeKind.Local).AddTicks(8866),
                            UseDarkMode = true
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.Expense", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId");

                    b.HasOne("vue_expenses_api.Domain.ExpenseType", "Type")
                        .WithMany("Expenses")
                        .HasForeignKey("TypeId");

                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseCategory", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseType", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.RefreshToken", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
