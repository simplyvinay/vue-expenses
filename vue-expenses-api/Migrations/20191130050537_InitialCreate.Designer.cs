// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vue_expenses_api.Infrastructure;

namespace vue_expenses_api.Migrations
{
    [DbContext(typeof(ExpensesContext))]
    [Migration("20191130050537_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("vue_expenses_api.Domain.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 693.004991483411m
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1037.87581531232m
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 273.147948446287m
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 733.048331100982m
                        },
                        new
                        {
                            Id = 5,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 95.0586225814459m
                        },
                        new
                        {
                            Id = 6,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 57.5379180058548m
                        },
                        new
                        {
                            Id = 7,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1225.22129361761m
                        },
                        new
                        {
                            Id = 8,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 516.605302932023m
                        },
                        new
                        {
                            Id = 9,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 650.345050101329m
                        },
                        new
                        {
                            Id = 10,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 558.802198646032m
                        },
                        new
                        {
                            Id = 11,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 140.770092904926m
                        },
                        new
                        {
                            Id = 12,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 429.541639950844m
                        },
                        new
                        {
                            Id = 13,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 926.95278833944m
                        },
                        new
                        {
                            Id = 14,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 216.697256181714m
                        },
                        new
                        {
                            Id = 15,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 791.063266010519m
                        },
                        new
                        {
                            Id = 16,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 706.41427566596m
                        },
                        new
                        {
                            Id = 17,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 569.429925908069m
                        },
                        new
                        {
                            Id = 18,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 520.646970030222m
                        },
                        new
                        {
                            Id = 19,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1183.62335124222m
                        },
                        new
                        {
                            Id = 20,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4,
                            UpdatedAt = new DateTime(2019, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1005.15954289826m
                        },
                        new
                        {
                            Id = 21,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3,
                            UpdatedAt = new DateTime(2019, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 62.4153886746687m
                        },
                        new
                        {
                            Id = 22,
                            Archived = false,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2019, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 87.4004010518084m
                        },
                        new
                        {
                            Id = 23,
                            Archived = false,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2019, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 1435.69466748074m
                        },
                        new
                        {
                            Id = 24,
                            Archived = false,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2019, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2019, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2,
                            UpdatedAt = new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Value = 300.668819714649m
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColourHex")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            Budget = 2000m,
                            ColourHex = "#CE93D8",
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "General Expenses",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            Budget = 3000m,
                            ColourHex = "#64B5F6",
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Shopping",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            Budget = 2500m,
                            ColourHex = "#26A69A",
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Utilities",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            Budget = 1000m,
                            ColourHex = "#FB8C00",
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Travel",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Credit Card",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Debit Card",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Cheque",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Name = "Cash",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Hash")
                        .HasColumnType("BLOB");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("BLOB");

                    b.Property<string>("SystemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseDarkMode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CreatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            Email = "test@demo.com",
                            FirstName = "John",
                            FullName = "John Doe",
                            Hash = new byte[] { 111, 209, 94, 38, 124, 54, 81, 184, 61, 106, 133, 236, 16, 4, 211, 153, 75, 49, 182, 85, 126, 174, 27, 100, 2, 197, 200, 107, 180, 100, 124, 255, 28, 7, 242, 191, 185, 178, 150, 39, 159, 251, 191, 120, 94, 252, 230, 191, 100, 49, 247, 236, 130, 9, 24, 43, 223, 24, 89, 97, 222, 248, 31, 156 },
                            LastName = "Doe",
                            Salt = new byte[] { 237, 49, 99, 254, 190, 29, 86, 64, 139, 32, 160, 208, 150, 248, 183, 184 },
                            SystemName = "VueExpenses",
                            UpdatedAt = new DateTime(2019, 11, 30, 5, 5, 37, 516, DateTimeKind.Local).AddTicks(5044),
                            UseDarkMode = true
                        });
                });

            modelBuilder.Entity("vue_expenses_api.Domain.Expense", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId");

                    b.HasOne("vue_expenses_api.Domain.ExpenseType", "Type")
                        .WithMany("Expenses")
                        .HasForeignKey("TypeId");

                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseCategory", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.ExpenseType", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("vue_expenses_api.Domain.RefreshToken", b =>
                {
                    b.HasOne("vue_expenses_api.Domain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
